name: 1.0.$(Rev:r)

resources:
- repo: self

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - src/*
    - azure-pipelines.yml

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: lint
    jobs:
    - job: build_and_lint
      steps:
        - task: UseDotNet@2
          displayName: 'Install .NET 8'
          inputs:
            version: '8.x'
            packageType: sdk
        - task: DotNetCoreCLI@2
          displayName: 'Build projects'
          inputs:
            projects: '**/*.csproj'
            arguments: '--configuration Release'
        - task: DotNetCoreCLI@2
          displayName: 'Lint dotnet'
          inputs:
            command: custom
            projects: '**/*.csproj'
            custom: format
            arguments: '-v diag --verify-no-changes'

  - stage: test
    jobs:
    - job: build_and_tests
      steps:
      - task: UseDotNet@2
        displayName: 'Install .NET 8.0'
        inputs:
          version: '8.x'
          packageType: sdk
      - task: DotNetCoreCLI@2
        displayName: 'Build'
        inputs:
          command: build
          projects: '**/*.csproj'
          arguments: '--configuration Release'
      - task: DotNetCoreCLI@2
        displayName: 'Test'
        inputs:
          command: test
          projects: 'test/**/*.csproj'
          arguments: '--configuration Release --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'
      - task: PublishCodeCoverageResults@2
        displayName: 'Publish code coverage report'
        inputs:
          summaryFileLocation: '$(Agent.TempDirectory)/**/*.cobertura.xml'

  - stage: publish
    jobs:
    - job: build_and_publish
      steps:
      - task: UseDotNet@2
        displayName: 'Install .NET 8.0'
        inputs:
          version: '8.x'
          packageType: sdk

      - script: |
          dotnet tool install -g dotnet-setversion --ignore-failed-sources
          dotnet tool update -g dotnet-setversion --ignore-failed-sources
          cd $(Build.SourcesDirectory)/src/Adliance.ResxR
          setversion $(Build.BuildNumber)
        displayName: 'Set Version'

      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          projects: 'src/Adliance.ResxR/Adliance.ResxR.csproj'
          arguments: '--configuration Release'

      - task: DotNetCoreCLI@2
        displayName: 'DotNet Pack'
        inputs:
          command: pack
          packagesToPack: 'src/Adliance.ResxR/Adliance.ResxR.csproj'
          versioningScheme: byBuildNumber

      - task: PublishBuildArtifacts@1
        displayName: Publish Artifact
        inputs:
          PathtoPublish: '$(build.artifactstagingdirectory)'

      - task: NuGetCommand@2
        displayName: NuGet Push
        inputs:
          command: push
          nuGetFeedType: external
          publishFeedCredentials: 'Public NuGet'
